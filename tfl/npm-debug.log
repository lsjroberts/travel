0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'install',
1 verbose cli   '--save',
1 verbose cli   'libxmljs' ]
2 info using npm@1.4.9
3 info using node@v0.11.13
4 warn package.json transport-for-london@0.0.0 No description
5 warn package.json transport-for-london@0.0.0 No repository field.
6 warn package.json transport-for-london@0.0.0 No README data
7 verbose readDependencies using package.json deps
8 verbose cache add [ 'libxmljs', null ]
9 verbose cache add name=undefined spec="libxmljs" args=["libxmljs",null]
10 verbose parsed url { protocol: null,
10 verbose parsed url   slashes: null,
10 verbose parsed url   auth: null,
10 verbose parsed url   host: null,
10 verbose parsed url   port: null,
10 verbose parsed url   hostname: null,
10 verbose parsed url   hash: null,
10 verbose parsed url   search: null,
10 verbose parsed url   query: null,
10 verbose parsed url   pathname: 'libxmljs',
10 verbose parsed url   path: 'libxmljs',
10 verbose parsed url   href: 'libxmljs' }
11 silly lockFile 7cc0caa4-libxmljs libxmljs
12 verbose lock libxmljs /home/laurence/.npm/7cc0caa4-libxmljs.lock
13 silly lockFile 7cc0caa4-libxmljs libxmljs
14 silly lockFile 7cc0caa4-libxmljs libxmljs
15 verbose addNamed [ 'libxmljs', '' ]
16 verbose addNamed [ null, '*' ]
17 silly lockFile facb906b-libxmljs libxmljs@
18 verbose lock libxmljs@ /home/laurence/.npm/facb906b-libxmljs.lock
19 silly addNameRange { name: 'libxmljs', range: '*', hasData: false }
20 verbose url raw libxmljs
21 verbose url resolving [ 'https://registry.npmjs.org/', './libxmljs' ]
22 verbose url resolved https://registry.npmjs.org/libxmljs
23 info trying registry request attempt 1 at 00:39:58
24 verbose etag "9DZJKZ09GWUANI0N0D71U6KFB"
25 http GET https://registry.npmjs.org/libxmljs
26 http 304 https://registry.npmjs.org/libxmljs
27 silly registry.get cb [ 304,
27 silly registry.get   { date: 'Tue, 22 Jul 2014 23:39:58 GMT',
27 silly registry.get     server: 'Apache',
27 silly registry.get     via: '1.1 varnish',
27 silly registry.get     'last-modified': 'Tue, 22 Jul 2014 23:39:58 GMT',
27 silly registry.get     'cache-control': 'max-age=60',
27 silly registry.get     etag: '"9DZJKZ09GWUANI0N0D71U6KFB"',
27 silly registry.get     'x-served-by': 'cache-lo81-LHR',
27 silly registry.get     'x-cache': 'MISS',
27 silly registry.get     'x-cache-hits': '0',
27 silly registry.get     'x-timer': 'S1406072398.508916,VS0,VE153',
27 silly registry.get     vary: 'Accept',
27 silly registry.get     'content-length': '0',
27 silly registry.get     connection: 'close' } ]
28 verbose etag libxmljs from cache
29 silly addNameRange number 2 { name: 'libxmljs', range: '*', hasData: true }
30 silly addNameRange versions [ 'libxmljs',
30 silly addNameRange   [ '0.4.1',
30 silly addNameRange     '0.4.2',
30 silly addNameRange     '0.4.3',
30 silly addNameRange     '0.5.0',
30 silly addNameRange     '0.5.1',
30 silly addNameRange     '0.5.2',
30 silly addNameRange     '0.5.3',
30 silly addNameRange     '0.5.4',
30 silly addNameRange     '0.6.0',
30 silly addNameRange     '0.6.1',
30 silly addNameRange     '0.7.0',
30 silly addNameRange     '0.7.1',
30 silly addNameRange     '0.8.0',
30 silly addNameRange     '0.8.1',
30 silly addNameRange     '0.9.0',
30 silly addNameRange     '0.10.0',
30 silly addNameRange     '0.11.0' ] ]
31 verbose addNamed [ 'libxmljs', '0.11.0' ]
32 verbose addNamed [ '0.11.0', '0.11.0' ]
33 silly lockFile 64f9bbbb-libxmljs-0-11-0 libxmljs@0.11.0
34 verbose lock libxmljs@0.11.0 /home/laurence/.npm/64f9bbbb-libxmljs-0-11-0.lock
35 silly lockFile 64f9bbbb-libxmljs-0-11-0 libxmljs@0.11.0
36 silly lockFile 64f9bbbb-libxmljs-0-11-0 libxmljs@0.11.0
37 silly lockFile facb906b-libxmljs libxmljs@
38 silly lockFile facb906b-libxmljs libxmljs@
39 silly resolved [ { name: 'libxmljs',
39 silly resolved     author: { name: 'Marco Rogers' },
39 silly resolved     contributors: [ [Object] ],
39 silly resolved     description: 'libxml bindings for v8 javascript engine',
39 silly resolved     version: '0.11.0',
39 silly resolved     scripts:
39 silly resolved      { test: 'node --expose_gc ./node_modules/.bin/nodeunit test',
39 silly resolved        install: 'node-gyp rebuild' },
39 silly resolved     repository: { type: 'git', url: 'http://github.com/polotek/libxmljs.git' },
39 silly resolved     bugs: { url: 'http://github.com/polotek/libxmljs/issues' },
39 silly resolved     main: './index',
39 silly resolved     engines: { node: '>=0.8.0' },
39 silly resolved     dependencies: { bindings: '1.1.1', nan: '1.1.2' },
39 silly resolved     devDependencies: { nodeunit: '0.9.0' },
39 silly resolved     gypfile: true,
39 silly resolved     readme: '# Libxmljs\n[![Build Status](https://secure.travis-ci.org/polotek/libxmljs.png?branch=master)](http://travis-ci.org/polotek/libxmljs)\n\nLibXML bindings for [node.js](http://nodejs.org/)\n\n```javascript\nvar libxmljs = require("libxmljs");\nvar xml =  \'<?xml version="1.0" encoding="UTF-8"?>\' +\n           \'<root>\' +\n               \'<child foo="bar">\' +\n                   \'<grandchild baz="fizbuzz">grandchild content</grandchild>\' +\n               \'</child>\' +\n               \'<sibling>with content!</sibling>\' +\n           \'</root>\';\n\nvar xmlDoc = libxmljs.parseXml(xml);\n\n// xpath queries\nvar gchild = xmlDoc.get(\'//grandchild\');\n\nconsole.log(gchild.text());  // prints "grandchild content"\n\nvar children = xmlDoc.root().childNodes();\nvar child = children[0];\n\nconsole.log(child.attr(\'foo\').value()); // prints "bar"\n```\n\n## Support\n\n* Docs - [http://github.com/polotek/libxmljs/wiki](http://github.com/polotek/libxmljs/wiki)\n* Mailing list - [http://groups.google.com/group/libxmljs](http://groups.google.com/group/libxmljs)\n\n## API and Examples\n\nCheck out the wiki [http://github.com/polotek/libxmljs/wiki](http://github.com/polotek/libxmljs/wiki).\n\nSee the [examples](https://github.com/polotek/libxmljs/tree/master/examples) folder.\n\n## Installation via [npm](https://npmjs.org)\n\n```shell\nnpm install libxmljs\n```\n\n## Contribute\n\nStart by checking out the [open issues](https://github.com/polotek/libxmljs/issues?labels=&page=1&state=open). Specifically the [desired feature](https://github.com/polotek/libxmljs/issues?labels=desired+feature&page=1&state=open) ones.\n\n### Requirements\n\nMake sure you have met the requirements for [node-gyp](https://github.com/TooTallNate/node-gyp#installation). You DO NOT need to manually install node-gyp; it comes bundled with node.\n\n',
39 silly resolved     readmeFilename: 'README.md',
39 silly resolved     homepage: 'https://github.com/polotek/libxmljs',
39 silly resolved     _id: 'libxmljs@0.11.0',
39 silly resolved     _shasum: '406db3bcd339662d080693b28fc79042d3642398',
39 silly resolved     _from: 'libxmljs@',
39 silly resolved     _resolved: 'https://registry.npmjs.org/libxmljs/-/libxmljs-0.11.0.tgz' } ]
40 info install libxmljs@0.11.0 into /home/laurence/Documents/Code/travel/tfl
41 info installOne libxmljs@0.11.0
42 info /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs unbuild
43 verbose tar unpack /home/laurence/.npm/libxmljs/0.11.0/package.tgz
44 silly lockFile 87dd3be0-travel-tfl-node-modules-libxmljs tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs
45 verbose lock tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs /home/laurence/.npm/87dd3be0-travel-tfl-node-modules-libxmljs.lock
46 silly lockFile b175d621--npm-libxmljs-0-11-0-package-tgz tar:///home/laurence/.npm/libxmljs/0.11.0/package.tgz
47 verbose lock tar:///home/laurence/.npm/libxmljs/0.11.0/package.tgz /home/laurence/.npm/b175d621--npm-libxmljs-0-11-0-package-tgz.lock
48 silly gunzTarPerm modes [ '755', '644' ]
49 silly gunzTarPerm extractEntry package.json
50 silly gunzTarPerm extractEntry .npmignore
51 silly gunzTarPerm extractEntry README.md
52 silly gunzTarPerm extractEntry LICENSE
53 silly gunzTarPerm extractEntry index.js
54 silly gunzTarPerm extractEntry binding.gyp
55 silly gunzTarPerm extractEntry .travis.yml
56 silly gunzTarPerm extractEntry Makefile
57 silly gunzTarPerm extractEntry lib/bindings.js
58 silly gunzTarPerm extractEntry lib/comment.js
59 silly gunzTarPerm extractEntry lib/document.js
60 silly gunzTarPerm extractEntry lib/element.js
61 silly gunzTarPerm extractEntry lib/sax_parser.js
62 silly gunzTarPerm extractEntry test/attribute.js
63 silly gunzTarPerm extractEntry test/element.js
64 silly gunzTarPerm extractEntry test/xml_parser.js
65 silly gunzTarPerm extractEntry test/html_parser.js
66 silly gunzTarPerm extractEntry test/main.js
67 silly gunzTarPerm extractEntry test/document.js
68 silly gunzTarPerm extractEntry test/node_attributes.js
69 silly gunzTarPerm extractEntry test/ref_integrity.js
70 silly gunzTarPerm extractEntry test/searching.js
71 silly gunzTarPerm extractEntry test/text_node.js
72 silly gunzTarPerm extractEntry test/traversal.js
73 silly gunzTarPerm extractEntry test/comment.js
74 silly gunzTarPerm extractEntry test/xml_sax_parser.js
75 silly gunzTarPerm extractEntry test/namespace.js
76 silly gunzTarPerm extractEntry test/fixtures/errors/comment.xml
77 silly gunzTarPerm extractEntry test/fixtures/parser-utf16.xml
78 silly gunzTarPerm extractEntry test/fixtures/parser.euc_jp.html
79 silly gunzTarPerm extractEntry test/fixtures/parser.html
80 silly gunzTarPerm extractEntry test/fixtures/parser.xml
81 silly gunzTarPerm extractEntry test/fixtures/sax_parser.xml
82 silly gunzTarPerm extractEntry test/fixtures/warnings/amp.html
83 silly gunzTarPerm extractEntry test/fixtures/warnings/ent9.xml
84 silly gunzTarPerm extractEntry vendor/libxml/schematron.c
85 silly gunzTarPerm extractEntry vendor/libxml/DOCBparser.c
86 silly gunzTarPerm extractEntry vendor/libxml/HTMLtree.c
87 silly gunzTarPerm extractEntry vendor/libxml/SAX.c
88 silly gunzTarPerm extractEntry vendor/libxml/SAX2.c
89 silly gunzTarPerm extractEntry vendor/libxml/buf.c
90 silly gunzTarPerm extractEntry vendor/libxml/buf.h
91 silly gunzTarPerm extractEntry vendor/libxml/c14n.c
92 silly gunzTarPerm extractEntry vendor/libxml/catalog.c
93 silly gunzTarPerm extractEntry vendor/libxml/chvalid.c
94 silly gunzTarPerm extractEntry vendor/libxml/config.h
95 silly gunzTarPerm extractEntry vendor/libxml/debugXML.c
96 silly gunzTarPerm extractEntry vendor/libxml/dict.c
97 silly gunzTarPerm extractEntry vendor/libxml/elfgcchack.h
98 silly gunzTarPerm extractEntry vendor/libxml/enc.h
99 silly gunzTarPerm extractEntry vendor/libxml/encoding.c
100 silly gunzTarPerm extractEntry vendor/libxml/entities.c
101 silly gunzTarPerm extractEntry vendor/libxml/error.c
102 silly gunzTarPerm extractEntry vendor/libxml/globals.c
103 silly gunzTarPerm extractEntry vendor/libxml/hash.c
104 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/schematron.h
105 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/DOCBparser.h
106 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/HTMLtree.h
107 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/Makefile
108 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/Makefile.am
109 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/Makefile.in
110 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/SAX.h
111 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/SAX2.h
112 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/c14n.h
113 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/catalog.h
114 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/chvalid.h
115 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/debugXML.h
116 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/dict.h
117 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/encoding.h
118 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/entities.h
119 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/globals.h
120 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/hash.h
121 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/list.h
122 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/nanoftp.h
123 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/nanohttp.h
124 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/parser.h
125 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/parserInternals.h
126 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/pattern.h
127 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/relaxng.h
128 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/schemasInternals.h
129 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/HTMLparser.h
130 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/threads.h
131 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/tree.h
132 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/uri.h
133 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/valid.h
134 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xinclude.h
135 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xlink.h
136 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlIO.h
137 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlautomata.h
138 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlerror.h
139 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlexports.h
140 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlmemory.h
141 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlmodule.h
142 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlreader.h
143 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlregexp.h
144 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlsave.h
145 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlschemas.h
146 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlschemastypes.h
147 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlstring.h
148 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlunicode.h
149 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlversion.h
150 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xmlwriter.h
151 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xpath.h
152 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xpathInternals.h
153 silly gunzTarPerm extractEntry vendor/libxml/include/libxml/xpointer.h
154 silly gunzTarPerm extractEntry vendor/libxml/include/win32config.h
155 silly gunzTarPerm extractEntry vendor/libxml/include/wsockcompat.h
156 silly gunzTarPerm extractEntry vendor/libxml/legacy.c
157 silly gunzTarPerm extractEntry vendor/libxml/libxml.gyp
158 silly gunzTarPerm extractEntry vendor/libxml/libxml.h
159 silly gunzTarPerm extractEntry vendor/libxml/list.c
160 silly gunzTarPerm extractEntry vendor/libxml/nanoftp.c
161 silly gunzTarPerm extractEntry vendor/libxml/nanohttp.c
162 silly gunzTarPerm extractEntry vendor/libxml/parser.c
163 silly gunzTarPerm extractEntry vendor/libxml/parserInternals.c
164 silly gunzTarPerm extractEntry vendor/libxml/pattern.c
165 silly gunzTarPerm extractEntry vendor/libxml/relaxng.c
166 silly gunzTarPerm extractEntry vendor/libxml/runsuite.c
167 silly gunzTarPerm extractEntry vendor/libxml/save.h
168 silly gunzTarPerm extractEntry vendor/libxml/HTMLparser.c
169 silly gunzTarPerm extractEntry vendor/libxml/threads.c
170 silly gunzTarPerm extractEntry vendor/libxml/timsort.h
171 silly gunzTarPerm extractEntry vendor/libxml/tree.c
172 silly gunzTarPerm extractEntry vendor/libxml/trio.c
173 silly gunzTarPerm extractEntry vendor/libxml/trio.h
174 silly gunzTarPerm extractEntry vendor/libxml/triodef.h
175 silly gunzTarPerm extractEntry vendor/libxml/trionan.c
176 silly gunzTarPerm extractEntry vendor/libxml/trionan.h
177 silly gunzTarPerm extractEntry vendor/libxml/triop.h
178 silly gunzTarPerm extractEntry vendor/libxml/triostr.c
179 silly gunzTarPerm extractEntry vendor/libxml/triostr.h
180 silly gunzTarPerm extractEntry vendor/libxml/uri.c
181 silly gunzTarPerm extractEntry vendor/libxml/valid.c
182 silly gunzTarPerm extractEntry vendor/libxml/xinclude.c
183 silly gunzTarPerm extractEntry vendor/libxml/xlink.c
184 silly gunzTarPerm extractEntry vendor/libxml/xmlIO.c
185 silly gunzTarPerm extractEntry vendor/libxml/xmlcatalog.c
186 silly gunzTarPerm extractEntry vendor/libxml/xmllint.c
187 silly gunzTarPerm extractEntry vendor/libxml/xmlmemory.c
188 silly gunzTarPerm extractEntry vendor/libxml/xmlmodule.c
189 silly gunzTarPerm extractEntry vendor/libxml/xmlreader.c
190 silly gunzTarPerm extractEntry vendor/libxml/xmlregexp.c
191 silly gunzTarPerm extractEntry vendor/libxml/xmlsave.c
192 silly gunzTarPerm extractEntry vendor/libxml/xmlschemas.c
193 silly gunzTarPerm extractEntry vendor/libxml/xmlschemastypes.c
194 silly gunzTarPerm extractEntry vendor/libxml/xmlstring.c
195 silly gunzTarPerm extractEntry vendor/libxml/xmlunicode.c
196 silly gunzTarPerm extractEntry vendor/libxml/xmlwriter.c
197 silly gunzTarPerm extractEntry vendor/libxml/xpath.c
198 silly gunzTarPerm extractEntry vendor/libxml/xpointer.c
199 silly gunzTarPerm extractEntry vendor/libxml/xzlib.c
200 silly gunzTarPerm extractEntry vendor/libxml/xzlib.h
201 silly gunzTarPerm extractEntry src/xml_element.h
202 silly gunzTarPerm extractEntry src/html_document.cc
203 silly gunzTarPerm extractEntry src/libxmljs.cc
204 silly gunzTarPerm extractEntry src/libxmljs.h
205 silly gunzTarPerm extractEntry src/xml_attribute.cc
206 silly gunzTarPerm extractEntry src/xml_attribute.h
207 silly gunzTarPerm extractEntry src/xml_comment.cc
208 silly gunzTarPerm extractEntry src/xml_comment.h
209 silly gunzTarPerm extractEntry src/xml_document.cc
210 silly gunzTarPerm extractEntry src/xml_document.h
211 silly gunzTarPerm extractEntry src/xml_element.cc
212 silly gunzTarPerm extractEntry src/html_document.h
213 silly gunzTarPerm extractEntry src/xml_namespace.cc
214 silly gunzTarPerm extractEntry src/xml_namespace.h
215 silly gunzTarPerm extractEntry src/xml_node.cc
216 silly gunzTarPerm extractEntry src/xml_node.h
217 silly gunzTarPerm extractEntry src/xml_sax_parser.cc
218 silly gunzTarPerm extractEntry src/xml_sax_parser.h
219 silly gunzTarPerm extractEntry src/xml_syntax_error.cc
220 silly gunzTarPerm extractEntry src/xml_syntax_error.h
221 silly gunzTarPerm extractEntry src/xml_xpath_context.cc
222 silly gunzTarPerm extractEntry src/xml_xpath_context.h
223 silly gunzTarPerm extractEntry examples/cdata.js
224 silly lockFile 87dd3be0-travel-tfl-node-modules-libxmljs tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs
225 silly lockFile 87dd3be0-travel-tfl-node-modules-libxmljs tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs
226 silly lockFile b175d621--npm-libxmljs-0-11-0-package-tgz tar:///home/laurence/.npm/libxmljs/0.11.0/package.tgz
227 silly lockFile b175d621--npm-libxmljs-0-11-0-package-tgz tar:///home/laurence/.npm/libxmljs/0.11.0/package.tgz
228 info preinstall libxmljs@0.11.0
229 verbose readDependencies using package.json deps
230 verbose readDependencies using package.json deps
231 verbose cache add [ 'bindings@1.1.1', null ]
232 verbose cache add name=undefined spec="bindings@1.1.1" args=["bindings@1.1.1",null]
233 verbose parsed url { protocol: null,
233 verbose parsed url   slashes: null,
233 verbose parsed url   auth: null,
233 verbose parsed url   host: null,
233 verbose parsed url   port: null,
233 verbose parsed url   hostname: null,
233 verbose parsed url   hash: null,
233 verbose parsed url   search: null,
233 verbose parsed url   query: null,
233 verbose parsed url   pathname: 'bindings@1.1.1',
233 verbose parsed url   path: 'bindings@1.1.1',
233 verbose parsed url   href: 'bindings@1.1.1' }
234 verbose cache add name="bindings" spec="1.1.1" args=["bindings","1.1.1"]
235 verbose parsed url { protocol: null,
235 verbose parsed url   slashes: null,
235 verbose parsed url   auth: null,
235 verbose parsed url   host: null,
235 verbose parsed url   port: null,
235 verbose parsed url   hostname: null,
235 verbose parsed url   hash: null,
235 verbose parsed url   search: null,
235 verbose parsed url   query: null,
235 verbose parsed url   pathname: '1.1.1',
235 verbose parsed url   path: '1.1.1',
235 verbose parsed url   href: '1.1.1' }
236 verbose addNamed [ 'bindings', '1.1.1' ]
237 verbose addNamed [ '1.1.1', '1.1.1' ]
238 silly lockFile 52dd60a7-bindings-1-1-1 bindings@1.1.1
239 verbose lock bindings@1.1.1 /home/laurence/.npm/52dd60a7-bindings-1-1-1.lock
240 verbose cache add [ 'nan@1.1.2', null ]
241 verbose cache add name=undefined spec="nan@1.1.2" args=["nan@1.1.2",null]
242 verbose parsed url { protocol: null,
242 verbose parsed url   slashes: null,
242 verbose parsed url   auth: null,
242 verbose parsed url   host: null,
242 verbose parsed url   port: null,
242 verbose parsed url   hostname: null,
242 verbose parsed url   hash: null,
242 verbose parsed url   search: null,
242 verbose parsed url   query: null,
242 verbose parsed url   pathname: 'nan@1.1.2',
242 verbose parsed url   path: 'nan@1.1.2',
242 verbose parsed url   href: 'nan@1.1.2' }
243 verbose cache add name="nan" spec="1.1.2" args=["nan","1.1.2"]
244 verbose parsed url { protocol: null,
244 verbose parsed url   slashes: null,
244 verbose parsed url   auth: null,
244 verbose parsed url   host: null,
244 verbose parsed url   port: null,
244 verbose parsed url   hostname: null,
244 verbose parsed url   hash: null,
244 verbose parsed url   search: null,
244 verbose parsed url   query: null,
244 verbose parsed url   pathname: '1.1.2',
244 verbose parsed url   path: '1.1.2',
244 verbose parsed url   href: '1.1.2' }
245 verbose addNamed [ 'nan', '1.1.2' ]
246 verbose addNamed [ '1.1.2', '1.1.2' ]
247 silly lockFile 60c82d82-nan-1-1-2 nan@1.1.2
248 verbose lock nan@1.1.2 /home/laurence/.npm/60c82d82-nan-1-1-2.lock
249 verbose url raw bindings
250 verbose url resolving [ 'https://registry.npmjs.org/', './bindings' ]
251 verbose url resolved https://registry.npmjs.org/bindings
252 info trying registry request attempt 1 at 00:40:00
253 verbose etag "HHDEMUMZU8OTS1DUFQCBQQ8Z"
254 http GET https://registry.npmjs.org/bindings
255 verbose url raw nan
256 verbose url resolving [ 'https://registry.npmjs.org/', './nan' ]
257 verbose url resolved https://registry.npmjs.org/nan
258 info trying registry request attempt 1 at 00:40:00
259 verbose etag "DS2SGYRH00C3H2FASAKE38WZ4"
260 http GET https://registry.npmjs.org/nan
261 http 304 https://registry.npmjs.org/nan
262 silly registry.get cb [ 304,
262 silly registry.get   { date: 'Tue, 22 Jul 2014 23:40:00 GMT',
262 silly registry.get     server: 'Apache',
262 silly registry.get     via: '1.1 varnish',
262 silly registry.get     'last-modified': 'Tue, 22 Jul 2014 23:40:00 GMT',
262 silly registry.get     'cache-control': 'max-age=60',
262 silly registry.get     etag: '"DS2SGYRH00C3H2FASAKE38WZ4"',
262 silly registry.get     'x-served-by': 'cache-lo82-LHR',
262 silly registry.get     'x-cache': 'HIT',
262 silly registry.get     'x-cache-hits': '1',
262 silly registry.get     'x-timer': 'S1406072400.306753,VS0,VE96',
262 silly registry.get     vary: 'Accept',
262 silly registry.get     'content-length': '0',
262 silly registry.get     connection: 'close' } ]
263 verbose etag nan from cache
264 silly lockFile 60c82d82-nan-1-1-2 nan@1.1.2
265 silly lockFile 60c82d82-nan-1-1-2 nan@1.1.2
266 http 304 https://registry.npmjs.org/bindings
267 silly registry.get cb [ 304,
267 silly registry.get   { date: 'Tue, 22 Jul 2014 23:40:00 GMT',
267 silly registry.get     server: 'Apache',
267 silly registry.get     via: '1.1 varnish',
267 silly registry.get     'last-modified': 'Tue, 22 Jul 2014 23:40:00 GMT',
267 silly registry.get     'cache-control': 'max-age=60',
267 silly registry.get     etag: '"HHDEMUMZU8OTS1DUFQCBQQ8Z"',
267 silly registry.get     'x-served-by': 'cache-lo80-LHR',
267 silly registry.get     'x-cache': 'HIT',
267 silly registry.get     'x-cache-hits': '1',
267 silly registry.get     'x-timer': 'S1406072400.306468,VS0,VE355',
267 silly registry.get     vary: 'Accept',
267 silly registry.get     'content-length': '0',
267 silly registry.get     connection: 'close' } ]
268 verbose etag bindings from cache
269 silly lockFile 52dd60a7-bindings-1-1-1 bindings@1.1.1
270 silly lockFile 52dd60a7-bindings-1-1-1 bindings@1.1.1
271 silly resolved [ { name: 'nan',
271 silly resolved     version: '1.1.2',
271 silly resolved     description: 'Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility',
271 silly resolved     main: 'include_dirs.js',
271 silly resolved     repository: { type: 'git', url: 'git://github.com/rvagg/nan.git' },
271 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
271 silly resolved     license: 'MIT',
271 silly resolved     readme: 'Native Abstractions for Node.js\n===============================\n\n**A header file filled with macro and utility goodness for making add-on development for Node.js easier across versions 0.8, 0.10 and 0.11, and eventually 0.12.**\n\n***Current version: 1.1.2*** *(See [nan.h](https://github.com/rvagg/nan/blob/master/nan.h) for complete ChangeLog)*\n\n[![NPM](https://nodei.co/npm/nan.png?downloads=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6)](https://nodei.co/npm/nan/)\n\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.11/0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n\nThis project also contains some helper utilities that make addon development a bit more pleasant.\n\n * **[News & Updates](#news)**\n * **[Usage](#usage)**\n * **[Example](#example)**\n * **[API](#api)**\n\n<a name="news"></a>\n## News & Updates\n\n### May-2014: 1.1.0 release\n\n* We\'ve deprecated `NanSymbol()`, you should just use `NanNew<String>()` now.\n* `NanNull()`, `NanUndefined()`, `NanTrue()`, `NanFalse()` all return `Local`s now.\n* `nan_isolate` is gone, it was intended to be internal-only but if you were using it then you should switch to `v8::Isolate::GetCurrent()`.\n* `NanNew()` has received some additional overload-love so you should be able to give it many kinds of values without specifying the `<Type>`.\n* Lots of small fixes and additions to expand the V8 API coverage, *use the source, Luke*.\n\n\n### May-2014: Major changes for V8 3.25 / Node 0.11.13\n\nNode 0.11.11 and 0.11.12 were both broken releases for native add-ons, you simply can\'t properly compile against either of them for different reasons. But we now have a 0.11.13 release that jumps a couple of versions of V8 ahead and includes some more, major (traumatic) API changes.\n\nBecause we are now nearing Node 0.12 and estimate that the version of V8 we are using in Node 0.11.13 will be close to the API we get for 0.12, we have taken the opportunity to not only *fix* NAN for 0.11.13 but make some major changes to improve the NAN API.\n\nWe have **removed support for Node 0.11 versions prior to 0.11.13**. As usual, our tests are run against (and pass) the last 5 versions of Node 0.8 and Node 0.10. We also include Node 0.11.13 obviously.\n\nThe major change is something that [Benjamin Byholm](kkoopa) has put many hours in to. We now have a fantastic new `NanNew<T>(args)` interface for creating new `Local`s, this replaces `NanNewLocal()` and much more. If you look in [./nan.h](nan.h) you\'ll see a large number of overloaded versions of this method. In general you should be able to `NanNew<Type>(arguments)` for any type you want to make a `Local` from. This includes `Persistent` types, so we now have a `Local<T> NanNew(const Persistent<T> arg)` to replace `NanPersistentToLocal()`.\n\nWe also now have `NanUndefined()`, `NanNull()`, `NanTrue()` and `NanFalse()`. Mainly because of the new requirement for an `Isolate` argument for each of the native V8 versions of this.\n\nV8 has now introduced an `EscapableHandleScope` from which you `scope.Escape(Local<T> value)` to *return* a value from a one scope to another. This replaces the standard `HandleScope` and `scope.Close(Local<T> value)`, although `HandleScope` still exists for when you don\'t need to return a handle to the caller. For NAN we are exposing it as `NanEscapableScope()` and `NanEscapeScope()`, while `NanScope()` is still how you create a new scope that doesn\'t need to return handles. For older versions of Node/V8, it\'ll still map to the older `HandleScope` functionality.\n\n`NanFromV8String()` was deprecated and has now been removed. You should use `NanCString()` or `NanRawString()` instead.\n\nBecause `node::MakeCallback()` now takes an `Isolate`, and because it doesn\'t exist in older versions of Node, we\'ve introduced `NanMakeCallback()`. You should *always* use this when calling a JavaScript function from C++.\n\nThere\'s lots more, check out the Changelog in nan.h or look through [#86](https://github.com/rvagg/nan/pull/86) for all the gory details.\n\n### Dec-2013: NanCString and NanRawString\n\nTwo new functions have been introduced to replace the functionality that\'s been provided by `NanFromV8String` until now. NanCString has sensible defaults so it\'s super easy to fetch a null-terminated c-style string out of a `v8::String`. `NanFromV8String` is still around and has defaults that allow you to pass a single handle to fetch a `char*` while `NanRawString` requires a little more attention to arguments.\n\n### Nov-2013: Node 0.11.9+ breaking V8 change\n\nThe version of V8 that\'s shipping with Node 0.11.9+ has changed the signature for new `Local`s to: `v8::Local<T>::New(isolate, value)`, i.e. introducing the `isolate` argument and therefore breaking all new `Local` declarations for previous versions. NAN 0.6+ now includes a `NanNewLocal<T>(value)` that can be used in place to work around this incompatibility and maintain compatibility with 0.8->0.11.9+ (minus a few early 0.11 releases).\n\nFor example, if you wanted to return a `null` on a callback you will have to change the argument from `v8::Local<v8::Value>::New(v8::Null())` to `NanNewLocal<v8::Value>(v8::Null())`.\n\n### Nov-2013: Change to binding.gyp `"include_dirs"` for NAN\n\nInclusion of NAN in a project\'s binding.gyp is now greatly simplified. You can now just use `"<!(node -e \\"require(\'nan\')\\")"` in your `"include_dirs"`, see example below (note Windows needs the quoting around `require` to be just right: `"require(\'nan\')"` with appropriate `\\` escaping).\n\n<a name="usage"></a>\n## Usage\n\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\n\n``` bash\n$ npm install --save nan\n```\n\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include <nan.h>` in your *.cpp* files:\n\n``` python\n"include_dirs" : [\n    "<!(node -e \\"require(\'nan\')\\")"\n]\n```\n\nThis works like a `-I<path-to-NAN>` when compiling your addon.\n\n<a name="example"></a>\n## Example\n\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\n\nFor a simpler example, see the **[async pi estimation example](https://github.com/rvagg/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/rvagg/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\n\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\n\n```c++\n// addon.cc\n#include <node.h>\n#include <nan.h>\n// ...\n\nusing v8::FunctionTemplate;\nusing v8::Handle;\nusing v8::Object;\nusing v8::String;\n\nvoid InitAll(Handle<Object> exports) {\n  exports->Set(NanNew<String>("calculateSync"),\n    NanNew<FunctionTemplate>(CalculateSync)->GetFunction());\n\n  exports->Set(NanNew<String>("calculateAsync"),\n    NanNew<FunctionTemplate>(CalculateAsync)->GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)\n```\n\n```c++\n// sync.h\n#include <node.h>\n#include <nan.h>\n\nNAN_METHOD(CalculateSync);\n```\n\n```c++\n// sync.cc\n#include <node.h>\n#include <nan.h>\n#include "./sync.h"\n// ...\n\nusing v8::Number;\n\n// Simple synchronous access to the `Estimate()` function\nNAN_METHOD(CalculateSync) {\n  NanScope();\n\n  // expect a number as the first argument\n  int points = args[0]->Uint32Value();\n  double est = Estimate(points);\n\n  NanReturnValue(NanNew<Number>(est));\n}\n```\n\n```c++\n// async.cc\n#include <node.h>\n#include <nan.h>\n#include "./async.h"\n\n// ...\n\nusing v8::Function;\nusing v8::Local;\nusing v8::Null;\nusing v8::Number;\nusing v8::Value;\n\nclass PiWorker : public NanAsyncWorker {\n public:\n  PiWorker(NanCallback *callback, int points)\n    : NanAsyncWorker(callback), points(points) {}\n  ~PiWorker() {}\n\n  // Executed inside the worker-thread.\n  // It is not safe to access V8, or V8 data structures\n  // here, so everything we need for input and output\n  // should go on `this`.\n  void Execute () {\n    estimate = Estimate(points);\n  }\n\n  // Executed when the async work is complete\n  // this function will be run inside the main event loop\n  // so it is safe to use V8 again\n  void HandleOKCallback () {\n    NanScope();\n\n    Local<Value> argv[] = {\n        NanNull()\n      , NanNew<Number>(estimate)\n    };\n\n    callback->Call(2, argv);\n  };\n\n private:\n  int points;\n  double estimate;\n};\n\n// Asynchronous access to the `Estimate()` function\nNAN_METHOD(CalculateAsync) {\n  NanScope();\n\n  int points = args[0]->Uint32Value();\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\n\n  NanAsyncQueueWorker(new PiWorker(callback, points));\n  NanReturnUndefined();\n}\n```\n\n<a name="api"></a>\n## API\n\n * <a href="#api_nan_method"><b><code>NAN_METHOD</code></b></a>\n * <a href="#api_nan_getter"><b><code>NAN_GETTER</code></b></a>\n * <a href="#api_nan_setter"><b><code>NAN_SETTER</code></b></a>\n * <a href="#api_nan_property_getter"><b><code>NAN_PROPERTY_GETTER</code></b></a>\n * <a href="#api_nan_property_setter"><b><code>NAN_PROPERTY_SETTER</code></b></a>\n * <a href="#api_nan_property_enumerator"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\n * <a href="#api_nan_property_deleter"><b><code>NAN_PROPERTY_DELETER</code></b></a>\n * <a href="#api_nan_property_query"><b><code>NAN_PROPERTY_QUERY</code></b></a>\n * <a href="#api_nan_index_getter"><b><code>NAN_INDEX_GETTER</code></b></a>\n * <a href="#api_nan_index_setter"><b><code>NAN_INDEX_SETTER</code></b></a>\n * <a href="#api_nan_index_enumerator"><b><code>NAN_INDEX_ENUMERATOR</code></b></a>\n * <a href="#api_nan_index_deleter"><b><code>NAN_INDEX_DELETER</code></b></a>\n * <a href="#api_nan_index_query"><b><code>NAN_INDEX_QUERY</code></b></a>\n * <a href="#api_nan_weak_callback"><b><code>NAN_WEAK_CALLBACK</code></b></a>\n * <a href="#api_nan_deprecated"><b><code>NAN_DEPRECATED</code></b></a>\n * <a href="#api_nan_inline"><b><code>NAN_INLINE</code></b></a>\n * <a href="#api_nan_new"><b><code>NanNew</code></b></a>\n * <a href="#api_nan_undefined"><b><code>NanUndefined</code></b></a>\n * <a href="#api_nan_null"><b><code>NanNull</code></b></a>\n * <a href="#api_nan_true"><b><code>NanTrue</code></b></a>\n * <a href="#api_nan_false"><b><code>NanFalse</code></b></a>\n * <a href="#api_nan_return_value"><b><code>NanReturnValue</code></b></a>\n * <a href="#api_nan_return_undefined"><b><code>NanReturnUndefined</code></b></a>\n * <a href="#api_nan_return_null"><b><code>NanReturnNull</code></b></a>\n * <a href="#api_nan_return_empty_string"><b><code>NanReturnEmptyString</code></b></a>\n * <a href="#api_nan_scope"><b><code>NanScope</code></b></a>\n * <a href="#api_nan_escapable_scope"><b><code>NanEscapableScope</code></b></a>\n * <a href="#api_nan_escape_scope"><b><code>NanEscapeScope</code></b></a>\n * <a href="#api_nan_locker"><b><code>NanLocker</code></b></a>\n * <a href="#api_nan_unlocker"><b><code>NanUnlocker</code></b></a>\n * <a href="#api_nan_get_internal_field_pointer"><b><code>NanGetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_set_internal_field_pointer"><b><code>NanSetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_object_wrap_handle"><b><code>NanObjectWrapHandle</code></b></a>\n * <del><a href="#api_nan_symbol"><b><code>NanSymbol</code></b></a></del>\n * <a href="#api_nan_get_pointer_safe"><b><code>NanGetPointerSafe</code></b></a>\n * <a href="#api_nan_set_pointer_safe"><b><code>NanSetPointerSafe</code></b></a>\n * <a href="#api_nan_raw_string"><b><code>NanRawString</code></b></a>\n * <a href="#api_nan_c_string"><b><code>NanCString</code></b></a>\n * <a href="#api_nan_boolean_option_value"><b><code>NanBooleanOptionValue</code></b></a>\n * <a href="#api_nan_uint32_option_value"><b><code>NanUInt32OptionValue</code></b></a>\n * <a href="#api_nan_error"><b><code>NanError</code></b>, <b><code>NanTypeError</code></b>, <b><code>NanRangeError</code></b></a>\n * <a href="#api_nan_throw_error"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\n * <a href="#api_nan_new_buffer_handle"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\n * <a href="#api_nan_buffer_use"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\n * <a href="#api_nan_new_context_handle"><b><code>NanNewContextHandle</code></b></a>\n * <a href="#api_nan_get_current_context"><b><code>NanGetCurrentContext</code></b></a>\n * <a href="#api_nan_has_instance"><b><code>NanHasInstance</code></b></a>\n * <a href="#api_nan_dispose_persistent"><b><code>NanDisposePersistent</code></b></a>\n * <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a>\n * <a href="#api_nan_make_weak_persistent"><b><code>NanMakeWeakPersistent</code></b></a>\n * <a href="#api_nan_set_template"><b><code>NanSetTemplate</code></b></a>\n * <a href="#api_nan_make_callback"><b><code>NanMakeCallback</code></b></a>\n * <a href="#api_nan_compile_script"><b><code>NanCompileScript</code></b></a>\n * <a href="#api_nan_run_script"><b><code>NanRunScript</code></b></a>\n * <a href="#api_nan_adjust_external_memory"><b><code>NanAdjustExternalMemory</code></b></a>\n * <a href="#api_nan_add_gc_epilogue_callback"><b><code>NanAddGCEpilogueCallback</code></b></a>\n * <a href="#api_nan_add_gc_prologue_callback"><b><code>NanAddGCPrologueCallback</code></b></a>\n * <a href="#api_nan_remove_gc_epilogue_callback"><b><code>NanRemoveGCEpilogueCallback</code></b></a>\n * <a href="#api_nan_remove_gc_prologue_callback"><b><code>NanRemoveGCPrologueCallback</code></b></a>\n * <a href="#api_nan_get_heap_statistics"><b><code>NanGetHeapStatistics</code></b></a>\n * <a href="#api_nan_callback"><b><code>NanCallback</code></b></a>\n * <a href="#api_nan_async_worker"><b><code>NanAsyncWorker</code></b></a>\n * <a href="#api_nan_async_queue_worker"><b><code>NanAsyncQueueWorker</code></b></a>\n\n<a name="api_nan_method"></a>\n### NAN_METHOD(methodname)\n\nUse `NAN_METHOD` to define your V8 accessible methods:\n\n```c++\n// .h:\nclass Foo : public node::ObjectWrap {\n  ...\n\n  static NAN_METHOD(Bar);\n  static NAN_METHOD(Baz);\n}\n\n\n// .cc:\nNAN_METHOD(Foo::Bar) {\n  ...\n}\n\nNAN_METHOD(Foo::Baz) {\n  ...\n}\n```\n\nThe reason for this macro is because of the method signature change in 0.11:\n\n```c++\n// 0.10 and below:\nHandle<Value> name(const Arguments& args)\n\n// 0.11 and above\nvoid name(const FunctionCallbackInfo<Value>& args)\n```\n\nThe introduction of `FunctionCallbackInfo` brings additional complications:\n\n<a name="api_nan_getter"></a>\n### NAN_GETTER(methodname)\n\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\n\n<a name="api_nan_setter"></a>\n### NAN_SETTER(methodname)\n\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_getter"></a>\n### NAN_PROPERTY_GETTER(cbname)\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\n\n<a name="api_nan_property_setter"></a>\n### NAN_PROPERTY_SETTER(cbname)\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_enumerator"></a>\n### NAN_PROPERTY_ENUMERATOR(cbname)\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\n\n<a name="api_nan_property_deleter"></a>\n### NAN_PROPERTY_DELETER(cbname)\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\n\n<a name="api_nan_property_query"></a>\n### NAN_PROPERTY_QUERY(cbname)\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\n\n<a name="api_nan_index_getter"></a>\n### NAN_INDEX_GETTER(cbname)\nUse `NAN_INDEX_GETTER` to declare your V8 accessible index getters. You get a `uint32_t` `index` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_GETTER`.\n\n<a name="api_nan_index_setter"></a>\n### NAN_INDEX_SETTER(cbname)\nUse `NAN_INDEX_SETTER` to declare your V8 accessible index setters. Same as `NAN_INDEX_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_index_enumerator"></a>\n### NAN_INDEX_ENUMERATOR(cbname)\nUse `NAN_INDEX_ENUMERATOR` to declare your V8 accessible index enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_INDEX_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_ENUMERATOR`.\n\n<a name="api_nan_index_deleter"></a>\n### NAN_INDEX_DELETER(cbname)\nUse `NAN_INDEX_DELETER` to declare your V8 accessible index deleters. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_DELETER`.\n\n<a name="api_nan_index_query"></a>\n### NAN_INDEX_QUERY(cbname)\nUse `NAN_INDEX_QUERY` to declare your V8 accessible index queries. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_QUERY`.\n\n<a name="api_nan_weak_callback"></a>\n### NAN_WEAK_CALLBACK(cbname)\n\nUse `NAN_WEAK_CALLBACK` to define your V8 WeakReference callbacks. Do not use for declaration. There is an argument object `const _NanWeakCallbackData<T, P> &data` allowing access to the weak object and the supplied parameter through its `GetValue` and `GetParameter` methods. You can even access the weak callback info object through the `GetCallbackInfo()`method, but you probably should not. `Revive()` keeps the weak object alive until the next GC round.\n\n```c++\nNAN_WEAK_CALLBACK(weakCallback) {\n  int *parameter = data.GetParameter();\n  NanMakeCallback(NanGetCurrentContext()->Global(), data.GetValue(), 0, NULL);\n  if ((*parameter)++ == 0) {\n    data.Revive();\n  } else {\n    delete parameter;\n  }\n}\n```\n\n<a name="api_nan_deprecated"></a>\n### NAN_DEPRECATED\nDeclares a function as deprecated.\n\n```c++\nstatic NAN_DEPRECATED NAN_METHOD(foo) {\n  ...\n}\n```\n\n<a name="api_nan_inline"></a>\n### NAN_INLINE\nInlines a function.\n\n```c++\nNAN_INLINE int foo(int bar) {\n  ...\n}\n```\n\n<a name="api_nan_new"></a>\n### Local&lt;T&gt; NanNew&lt;T&gt;( ... )\n\nUse `NanNew` to construct almost all v8 objects and make new local handles.\n\n```c++\nLocal<String> s = NanNew<String>("value");\n\n...\n\nPersistent<Object> o;\n\n...\n\nLocal<Object> lo = NanNew(o);\n\n```\n\n<a name="api_nan_undefined"></a>\n### Local&lt;Primitive&gt; NanUndefined()\n\nUse instead of `Undefined()`\n\n<a name="api_nan_null"></a>\n### Local&lt;Primitive&gt; NanNull()\n\nUse instead of `Null()`\n\n<a name="api_nan_true"></a>\n### Local&lt;Boolean&gt; NanTrue()\n\nUse instead of `True()`\n\n<a name="api_nan_false"></a>\n### Local&lt;Boolean&gt; NanFalse()\n\nUse instead of `False()`\n\n<a name="api_nan_return_value"></a>\n### NanReturnValue(Handle&lt;Value&gt;)\n\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  ...\n\n  NanReturnValue(NanNew<String>("FooBar!"));\n}\n```\n\nNo `return` statement required.\n\n<a name="api_nan_return_undefined"></a>\n### NanReturnUndefined()\n\nUse `NanReturnUndefined` when you don\'t want to return anything from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnUndefined();\n}\n```\n\n<a name="api_nan_return_null"></a>\n### NanReturnNull()\n\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnNull();\n}\n```\n\n<a name="api_nan_return_empty_string"></a>\n### NanReturnEmptyString()\n\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnEmptyString();\n}\n```\n\n<a name="api_nan_scope"></a>\n### NanScope()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope` when you do not wish to return handles (`Handle` or `Local`) to the surrounding scope (or in functions directly exposed to V8, as they do not return values in the normal sense):\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanScope();\n\n  NanReturnValue(NanNew<String>("FooBar!"));\n}\n```\n\nThis method is not directly exposed to V8, nor does it return a handle, so it uses an unescapable scope:\n\n```c++\nbool Foo::Bar() {\n  NanScope();\n  \n  Local<Boolean> val = NanFalse();\n  ...\n  return val->Value();\n}\n```\n\n<a name="api_nan_escapable_scope"></a>\n### NanEscapableScope()\n\nThe separation of handle scopes into escapable and inescapable scopes makes `NanEscapableScope()` necessary, use it in place of `HandleScope scope` when you later wish to return a handle (`Handle` or `Local`) from the scope, this is for internal functions not directly exposed to V8:\n\n```c++\nHandle<String> Foo::Bar() {\n  NanEscapableScope();\n\n  return NanEscapeScope(NanNew<String>("FooBar!"));\n}\n```\n\n<a name="api_nan_esacpe_scope"></a>\n### Local&lt;T&gt; NanEscapeScope(Handle&lt;T&gt; value);\nUse together with `NanEscapableScope` to escape the scope. Corresponds to `HandleScope::Close` or `EscapableHandleScope::Escape`.\n\n<a name="api_nan_locker"></a>\n### NanLocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_unlocker"></a>\n### NanUnlocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_get_internal_field_pointer"></a>\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\n\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\n\n```c++\nLocal<Object> obj;\n...\nNanGetInternalFieldPointer(obj, 0);\n```\n<a name="api_nan_set_internal_field_pointer"></a>\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\n\nSets the value of the internal field at `index` on a V8 `Object` handle.\n\n```c++\nstatic Persistent<Function> dataWrapperCtor;\n...\nLocal<Object> wrapper = NanNew(dataWrapperCtor)->NewInstance();\nNanSetInternalFieldPointer(wrapper, 0, this);\n```\n\n<a name="api_nan_object_wrap_handle"></a>\n### Local&lt;Object&gt; NanObjectWrapHandle(Object)\n\nWhen you want to fetch the V8 object handle from a native object you\'ve wrapped with Node\'s `ObjectWrap`, you should use `NanObjectWrapHandle`:\n\n```c++\nNanObjectWrapHandle(iterator)->Get(NanNew<String>("end"))\n```\n\n<a name="api_nan_symbol"></a>\n### <del>Local&lt;String&gt; NanSymbol(const char *)</del>\n\nDeprecated. Use `NanNew<String>` instead.\n<del>Use to create string symbol objects (i.e. `v8::String::NewSymbol(x)`), for getting and setting object properties, or names of objects.</del>\n\n```c++\nbool foo = false;\nif (obj->Has(NanNew<String>("foo")))\n  foo = optionsObj->Get(NanNew<String>("foo"))->BooleanValue()\n```\n\n<a name="api_nan_get_pointer_safe"></a>\n### Type NanGetPointerSafe(Type *[, Type])\n\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\n\n```c++\nchar *plugh(uint32_t *optional) {\n  char res[] = "xyzzy";\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\n  switch (param) {\n    ...\n  }\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\n}  \n```\n\n<a name="api_nan_set_pointer_safe"></a>\n### bool NanSetPointerSafe(Type *, Type)\n\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply returns `false`.  Otherwise, the value is assigned to the variable the pointer points to.\n\n```c++\nconst char *plugh(size_t *outputsize) {\n  char res[] = "xyzzy";\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\n    ...\n  }\n\n  ...\n}\n```\n\n<a name="api_nan_raw_string"></a>\n### void* NanRawString(Handle&lt;Value&gt;, enum Nan::Encoding, size_t *, void *, size_t, int)\n\nWhen you want to convert a V8 `String` to a `char*` buffer, use `NanRawString`. You have to supply an encoding as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows setting `String::WriteOptions`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nvoid* decoded = NanRawString(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\nchar param_copy[count];\nmemcpy(param_copy, decoded, count);\ndelete[] decoded;\n```\n\n<a name="api_nan_c_string"></a>\n### char* NanCString(Handle&lt;Value&gt;, size_t *[, char *, size_t, int])\n\nWhen you want to convert a V8 `String` to a null-terminated C `char*` use `NanCString`. The resulting `char*` will be UTF-8-encoded, and you need to supply a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `v8::String::NO_OPTIONS`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nchar* name = NanCString(args[0], &count);\n```\n\n<a name="api_nan_boolean_option_value"></a>\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\n\nWhen you have an "options" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\n\nThe optional last parameter is the *default* value, which is `false` if left off:\n\n```c++\n// `foo` is false unless the user supplies a truthy value for it\nbool foo = NanBooleanOptionValue(optionsObj, NanNew<String>("foo"));\n// `bar` is true unless the user supplies a falsy value for it\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanNew<String>("bar"), true);\n```\n\n<a name="api_nan_uint32_option_value"></a>\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\n\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\n\nRequires all 3 arguments as a default is not optional:\n\n```c++\nuint32_t count = NanUInt32OptionValue(optionsObj, NanNew<String>("count"), 1024);\n```\n\n<a name="api_nan_error"></a>\n### NanError(message), NanTypeError(message), NanRangeError(message)\n\nFor making `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nLocal<Value> res = NanError("you must supply a callback argument");\n```\n\n<a name="api_nan_throw_error"></a>\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\n\nFor throwing `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nNanThrowError("you must supply a callback argument");\n```\n\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\n\n<a name="api_nan_new_buffer_handle"></a>\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\n\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\n\n```c++\nNanNewBufferHandle((char*)value.data(), value.size());\n```\n\nCan also be used to initialize a `Buffer` with just a `size` argument.\n\nCan also be supplied with a `NanFreeCallback` and a hint for the garbage collector.\n\n<a name="api_nan_buffer_use"></a>\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\n\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\nWhile it was possible to get around this, it required a shim by passing a\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\nneeding to use this shim.\n\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\nmemory automatically when the weak callback is called. Keep this in mind, as\ncareless use can lead to "double free or corruption" and other cryptic failures.\n\n<a name="api_nan_has_instance"></a>\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\n\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\n\n<a href="#api_nan_new_context_handle">\n### Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])\nCreates a new `Local<Context>` handle.\n\n```c++\nLocal<FunctionTemplate> ftmpl = NanNew<FunctionTemplate>();\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\n```\n\n<a href="#api_nan_get_current_context">\n### Local&lt;Context&gt; NanGetCurrentContext()\n\nGets the current context.\n\n```c++\nLocal<Context> ctx = NanGetCurrentContext();\n```\n\n<a name="api_nan_dispose_persistent"></a>\n### void NanDisposePersistent(Persistent&lt;T&gt; &)\n\nUse `NanDisposePersistent` to dispose a `Persistent` handle.\n\n```c++\nNanDisposePersistent(persistentHandle);\n```\n\n<a name="api_nan_assign_persistent"></a>\n### NanAssignPersistent(handle, object)\n\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\n\nIn general it is now better to place anything you want to protect from V8\'s garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\n\n```c++\nPersistent<Object> persistentHandle;\n\n...\n\nLocal<Object> obj = NanNew<Object>();\nobj->Set(NanNew<String>("key"), keyHandle); // where keyHandle might be a Local<String>\nNanAssignPersistent(persistentHandle, obj)\n```\n\n<a name="api_nan_make_weak_persistent"></a>\n### _NanWeakCallbackInfo&lt;T, P&gt;* NanMakeWeakPersistent(Handle&lt;T&gt;, P*, _NanWeakCallbackInfo&lt;T, P&gt;::Callback)\n\nCreates a weak persistent handle with the supplied parameter and `NAN_WEAK_CALLBACK`. The callback has to be fully specialized to work on all versions of Node.\n\n```c++\nNAN_WEAK_CALLBACK(weakCallback) {\n\n...\n\n}\n\nLocal<Function> func;\n\n...\n\nint *parameter = new int(0);\nNanMakeWeakPersistent(func, parameter, &weakCallback<Function, int>);\n```\n\n<a name="api_nan_set_template"></a>\n### NanSetTemplate(templ, name, value)\n\nUse to add properties on object and function templates.\n\n<a name="api_nan_make_callback"></a>\n### NanMakeCallback(target, func, argc, argv)\n\nUse instead of `node::MakeCallback` to call javascript functions. This is the only proper way of calling functions.\n\n<a name="api_nan_compile_script"></a>\n### NanCompileScript(Handle<String> s [, const ScriptOrigin&amp; origin])\n\nUse to create new scripts bound to the current context.\n\n<a name="api_nan_run_script"></a>\n### NanRunScript(script)\n\nUse to run both bound and unbound scripts.\n\n<a name="api_nan_adjust_external_memory"></a>\n### NanAdjustExternalMemory(int change_in_bytes)\n\nSimply does `AdjustAmountOfExternalAllocatedMemory`\n\n<a name="api_nan_add_gc_epilogue_callback"></a>\n### NanAddGCEpilogueCallback(GCEpilogueCallback callback, GCType gc_type_filter=kGCTypeAll)\n\nSimply does `AddGCEpilogueCallback`\n\n<a name="api_nan_add_gc_prologue_callback"></a>\n### NanAddGCPrologueCallback(GCPrologueCallback callback, GCType gc_type_filter=kGCTypeAll)\n\nSimply does `AddGCPrologueCallback`\n\n<a name="api_nan_remove_gc_epilogue_callback"></a>\n### NanRemoveGCEpilogueCallback(GCEpilogueCallback callback)\n\nSimply does `RemoveGCEpilogueCallback`\n\n<a name="api_nan_add_gc_prologue_callback"></a>\n### NanRemoveGCPrologueCallback(GCPrologueCallback callback)\n\nSimply does `RemoveGCPrologueCallback`\n\n<a name="api_nan_get_heap_statistics"></a>\n### NanGetHeapStatistics(HeapStatistics *heap_statistics)\n\nSimply does `GetHeapStatistics`\n\n<a name="api_nan_callback"></a>\n### NanCallback\n\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Handle<Function>` is annoyingly tricky. `NanCallback` makes it easier by taking your handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\n\n```c++\nLocal<Function> callbackHandle = args[0].As<Function>();\nNanCallback *callback = new NanCallback(callbackHandle);\n// pass `callback` around and it\'s safe from GC until you:\ndelete callback;\n```\n\nYou can execute the callback like so:\n\n```c++\n// no arguments:\ncallback->Call(0, NULL);\n\n// an error argument:\nHandle<Value> argv[] = {\n  NanError(NanNew<String>("fail!"))\n};\ncallback->Call(1, argv);\n\n// a success argument:\nHandle<Value> argv[] = {\n  NanNull(),\n  NanNew<String>("w00t!")\n};\ncallback->Call(2, argv);\n```\n\n`NanCallback` also has a `Local<Function> GetCallback()` method that you can use\nto fetch a local handle to the underlying callback function, as well  as a\n`void SetFunction(Handle<Function>)` for setting the callback on the\n`NanCallback`. You can check if a `NanCallback` is empty with the `bool IsEmpty()` method. Additionally a generic constructor is available for using\n`NanCallback` without performing heap allocations.\n\n<a name="api_nan_async_worker"></a>\n### NanAsyncWorker\n\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\n\nSee a rough outline of the implementation:\n\n```c++\nclass NanAsyncWorker {\npublic:\n  NanAsyncWorker (NanCallback *callback);\n\n  // Clean up persistent handles and delete the *callback\n  virtual ~NanAsyncWorker ();\n\n  // Check the `ErrorMessage()` and call HandleOKCallback()\n  // or HandleErrorCallback depending on whether it has been set or not\n  virtual void WorkComplete ();\n\n  // You must implement this to do some async work. If there is an\n  // error then use `SetErrorMessage()` to set an error message and the callback will\n  // be passed that string in an Error object\n  virtual void Execute ();\n\n  // Save a V8 object in a Persistent handle to protect it from GC\n  void SaveToPersistent(const char *key, Local<Object> &obj);\n\n  // Fetch a stored V8 object (don\'t call from within `Execute()`)\n  Local<Object> GetFromPersistent(const char *key);\n  \n  // Get the error message (or NULL)\n  const char *ErrorMessage();\n  \n  // Set an error message\n  void SetErrorMessage(const char *msg);\n  \nprotected:\n  // Default implementation calls the callback function with no arguments.\n  // Override this to return meaningful data\n  virtual void HandleOKCallback ();\n\n  // Default implementation calls the callback function with an Error object\n  // wrapping the `errmsg` string\n  virtual void HandleErrorCallback ();\n};\n```\n\n<a name="api_nan_async_queue_worker"></a>\n### NanAsyncQueueWorker(NanAsyncWorker *)\n\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\n\n### Contributors\n\nNAN is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align="left">Rod Vagg</th><td><a href="https://github.com/rvagg">GitHub/rvagg</a></td><td><a href="http://twitter.com/rvagg">Twitter/@rvagg</a></td></tr>\n<tr><th align="left">Benjamin Byholm</th><td><a href="https://github.com/kkoopa/">GitHub/kkoopa</a></td><td>-</td></tr>\n<tr><th align="left">Trevor Norris</th><td><a href="https://github.com/trevnorris">GitHub/trevnorris</a></td><td><a href="http://twitter.com/trevnorris">Twitter/@trevnorris</a></td></tr>\n<tr><th align="left">Nathan Rajlich</th><td><a href="https://github.com/TooTallNate">GitHub/TooTallNate</a></td><td><a href="http://twitter.com/TooTallNate">Twitter/@TooTallNate</a></td></tr>\n<tr><th align="left">Brett Lawson</th><td><a href="https://github.com/brett19">GitHub/brett19</a></td><td><a href="http://twitter.com/brett19x">Twitter/@brett19x</a></td></tr>\n<tr><th align="left">Ben Noordhuis</th><td><a href="https://github.com/bnoordhuis">GitHub/bnoordhuis</a></td><td><a href="http://twitter.com/bnoordhuis">Twitter/@bnoordhuis</a></td></tr>\n</tbody></table>\n\nLicence &amp; copyright\n-----------------------\n\nCopyright (c) 2014 NAN contributors (listed above).\n\nNative Abstractions for Node.js is licensed under an MIT +no-false-attribs license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n',
271 silly resolved     readmeFilename: 'README.md',
271 silly resolved     bugs: { url: 'https://github.com/rvagg/nan/issues' },
271 silly resolved     homepage: 'https://github.com/rvagg/nan',
271 silly resolved     _id: 'nan@1.1.2',
271 silly resolved     _shasum: 'bbd48552fc0758673ebe8fada360b60278a6636b',
271 silly resolved     _from: 'nan@1.1.2',
271 silly resolved     _resolved: 'https://registry.npmjs.org/nan/-/nan-1.1.2.tgz' },
271 silly resolved   { name: 'bindings',
271 silly resolved     description: 'Helper module for loading your native module\'s .node file',
271 silly resolved     keywords: [ 'native', 'addon', 'bindings', 'gyp', 'waf', 'c', 'c++' ],
271 silly resolved     version: '1.1.1',
271 silly resolved     author:
271 silly resolved      { name: 'Nathan Rajlich',
271 silly resolved        email: 'nathan@tootallnate.net',
271 silly resolved        url: 'http://tootallnate.net' },
271 silly resolved     repository:
271 silly resolved      { type: 'git',
271 silly resolved        url: 'git://github.com/TooTallNate/node-bindings.git' },
271 silly resolved     main: './bindings.js',
271 silly resolved     readme: 'node-bindings\n=============\n### Helper module for loading your native module\'s .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the "swiss army knife" of `require()`ing your native module\'s\n`.node` file.\n\nThroughout the course of Node\'s native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `"dependencies"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require(\'bindings\')(\'binding.node\')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n → /Users/nrajlich/ref/build/binding.node\n → /Users/nrajlich/ref/build/Debug/binding.node\n → /Users/nrajlich/ref/build/Release/binding.node\n → /Users/nrajlich/ref/out/Debug/binding.node\n → /Users/nrajlich/ref/Debug/binding.node\n → /Users/nrajlich/ref/out/Release/binding.node\n → /Users/nrajlich/ref/Release/binding.node\n → /Users/nrajlich/ref/build/default/binding.node\n → /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
271 silly resolved     readmeFilename: 'README.md',
271 silly resolved     bugs: { url: 'https://github.com/TooTallNate/node-bindings/issues' },
271 silly resolved     homepage: 'https://github.com/TooTallNate/node-bindings',
271 silly resolved     _id: 'bindings@1.1.1',
271 silly resolved     _shasum: '951f7ae010302ffc50b265b124032017ed2bf6f3',
271 silly resolved     _from: 'bindings@1.1.1',
271 silly resolved     _resolved: 'https://registry.npmjs.org/bindings/-/bindings-1.1.1.tgz' } ]
272 info install nan@1.1.2 into /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs
273 info install bindings@1.1.1 into /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs
274 info installOne nan@1.1.2
275 info installOne bindings@1.1.1
276 info /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/nan unbuild
277 info /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/bindings unbuild
278 verbose tar unpack /home/laurence/.npm/nan/1.1.2/package.tgz
279 silly lockFile 1663562f-odules-libxmljs-node-modules-nan tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/nan
280 verbose lock tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/nan /home/laurence/.npm/1663562f-odules-libxmljs-node-modules-nan.lock
281 silly lockFile cc6493cf-urence-npm-nan-1-1-2-package-tgz tar:///home/laurence/.npm/nan/1.1.2/package.tgz
282 verbose lock tar:///home/laurence/.npm/nan/1.1.2/package.tgz /home/laurence/.npm/cc6493cf-urence-npm-nan-1-1-2-package-tgz.lock
283 verbose tar unpack /home/laurence/.npm/bindings/1.1.1/package.tgz
284 silly lockFile bff926e0-s-libxmljs-node-modules-bindings tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/bindings
285 verbose lock tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/bindings /home/laurence/.npm/bff926e0-s-libxmljs-node-modules-bindings.lock
286 silly lockFile 538af056-e-npm-bindings-1-1-1-package-tgz tar:///home/laurence/.npm/bindings/1.1.1/package.tgz
287 verbose lock tar:///home/laurence/.npm/bindings/1.1.1/package.tgz /home/laurence/.npm/538af056-e-npm-bindings-1-1-1-package-tgz.lock
288 silly gunzTarPerm modes [ '755', '644' ]
289 silly gunzTarPerm modes [ '755', '644' ]
290 silly gunzTarPerm extractEntry package.json
291 silly gunzTarPerm extractEntry README.md
292 silly gunzTarPerm extractEntry bindings.js
293 silly gunzTarPerm extractEntry package.json
294 silly lockFile bff926e0-s-libxmljs-node-modules-bindings tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/bindings
295 silly lockFile bff926e0-s-libxmljs-node-modules-bindings tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/bindings
296 silly lockFile 538af056-e-npm-bindings-1-1-1-package-tgz tar:///home/laurence/.npm/bindings/1.1.1/package.tgz
297 silly lockFile 538af056-e-npm-bindings-1-1-1-package-tgz tar:///home/laurence/.npm/bindings/1.1.1/package.tgz
298 silly gunzTarPerm extractEntry README.md
299 silly gunzTarPerm extractEntry LICENSE
300 info preinstall bindings@1.1.1
301 verbose readDependencies using package.json deps
302 verbose readDependencies using package.json deps
303 silly resolved []
304 verbose about to build /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/bindings
305 info build /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/bindings
306 verbose linkStuff [ false,
306 verbose linkStuff   false,
306 verbose linkStuff   false,
306 verbose linkStuff   '/home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules' ]
307 info linkStuff bindings@1.1.1
308 verbose linkBins bindings@1.1.1
309 verbose linkMans bindings@1.1.1
310 verbose rebuildBundles bindings@1.1.1
311 info install bindings@1.1.1
312 silly gunzTarPerm extractEntry include_dirs.js
313 silly gunzTarPerm extractEntry .dntrc
314 info postinstall bindings@1.1.1
315 silly gunzTarPerm extractEntry build/config.gypi
316 silly gunzTarPerm extractEntry nan.h
317 silly lockFile 1663562f-odules-libxmljs-node-modules-nan tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/nan
318 silly lockFile 1663562f-odules-libxmljs-node-modules-nan tar:///home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/nan
319 silly lockFile cc6493cf-urence-npm-nan-1-1-2-package-tgz tar:///home/laurence/.npm/nan/1.1.2/package.tgz
320 silly lockFile cc6493cf-urence-npm-nan-1-1-2-package-tgz tar:///home/laurence/.npm/nan/1.1.2/package.tgz
321 info preinstall nan@1.1.2
322 verbose readDependencies using package.json deps
323 verbose readDependencies using package.json deps
324 silly resolved []
325 verbose about to build /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/nan
326 info build /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules/nan
327 verbose linkStuff [ false,
327 verbose linkStuff   false,
327 verbose linkStuff   false,
327 verbose linkStuff   '/home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs/node_modules' ]
328 info linkStuff nan@1.1.2
329 verbose linkBins nan@1.1.2
330 verbose linkMans nan@1.1.2
331 verbose rebuildBundles nan@1.1.2
332 info install nan@1.1.2
333 info postinstall nan@1.1.2
334 verbose about to build /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs
335 info build /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs
336 verbose linkStuff [ false,
336 verbose linkStuff   false,
336 verbose linkStuff   false,
336 verbose linkStuff   '/home/laurence/Documents/Code/travel/tfl/node_modules' ]
337 info linkStuff libxmljs@0.11.0
338 verbose linkBins libxmljs@0.11.0
339 verbose linkMans libxmljs@0.11.0
340 verbose rebuildBundles libxmljs@0.11.0
341 verbose rebuildBundles [ 'bindings', 'nan' ]
342 info install libxmljs@0.11.0
343 verbose unsafe-perm in lifecycle true
344 info libxmljs@0.11.0 Failed to exec install script
345 info /home/laurence/Documents/Code/travel/tfl/node_modules/libxmljs unbuild
346 info preuninstall libxmljs@0.11.0
347 info uninstall libxmljs@0.11.0
348 verbose true,/home/laurence/Documents/Code/travel/tfl/node_modules,/home/laurence/Documents/Code/travel/tfl/node_modules unbuild libxmljs@0.11.0
349 info postuninstall libxmljs@0.11.0
350 error libxmljs@0.11.0 install: `node-gyp rebuild`
350 error Exit status 1
351 error Failed at the libxmljs@0.11.0 install script.
351 error This is most likely a problem with the libxmljs package,
351 error not with npm itself.
351 error Tell the author that this fails on your system:
351 error     node-gyp rebuild
351 error You can get their info via:
351 error     npm owner ls libxmljs
351 error There is likely additional logging output above.
352 error System Linux 3.11.0-22-generic
353 error command "/usr/local/bin/node" "/usr/local/bin/npm" "install" "--save" "libxmljs"
354 error cwd /home/laurence/Documents/Code/travel/tfl
355 error node -v v0.11.13
356 error npm -v 1.4.9
357 error code ELIFECYCLE
358 verbose exit [ 1, true ]
